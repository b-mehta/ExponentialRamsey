/-
Copyright (c) 2023 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.Data.Nat.Choose.Bounds
import Mathlib.Data.Nat.Choose.Central
import Mathlib.Data.Nat.Choose.Cast
import Mathlib.Analysis.SpecialFunctions.Stirling
import Mathlib.Analysis.SpecialFunctions.Exponential
import Mathlib.Topology.MetricSpace.CauSeqFilter
import Mathlib.Tactic

/-!
# Unconditional bounds on the central binomial coefficient from Stirling approximations
-/


noncomputable section

open scoped Topology Real Nat

open Finset Filter Nat Real

theorem centralBinom_ratio {Œ± : Type*} [Field Œ±] [CharZero Œ±] (n : ‚Ñï) :
    (centralBinom (n + 1) : Œ±) / centralBinom n = 4 * ((n + 1 / 2) / (n + 1)) :=
  by
  rw [mul_div_assoc', mul_add, eq_div_iff, ‚Üê cast_add_one, div_mul_eq_mul_div, mul_comm, ‚Üê cast_mul,
    succ_mul_centralBinom_succ, cast_mul, mul_div_cancel_right‚ÇÄ]
  ¬∑ rw [Nat.mul_add_one, ‚Üê mul_assoc, cast_add, cast_mul]
    norm_num1
    rfl
  ¬∑ rw [Nat.cast_ne_zero]
    exact centralBinom_ne_zero _
  exact Nat.cast_add_one_ne_zero _

-- ((‚Üën + 7 / 3) * ‚Üën + 19 / 12) * ‚Üën + 1 / 3 ‚â§ ((‚Üën + 7 / 3) * ‚Üën + 5 / 3) * ‚Üën + 1 / 3

theorem upper_monotone_aux (n : ‚Ñï) :
    ((n : ‚Ñù) + 1 / 2) / (n + 1) ‚â§ Real.sqrt (n + 1 / 3) / Real.sqrt (n + 1 + 1 / 3) := by
  rw [‚Üê Real.sqrt_div]
  refine Real.le_sqrt_of_sq_le ?_
  rw [div_pow, div_le_div_iff]
  ¬∑ ring_nf -- regression: this makes the goal look ugly,
    gcongr _ + _ * ?_ + _ + _
    norm_num1
  all_goals positivity

theorem lower_monotone_aux (n : ‚Ñï) :
    Real.sqrt (n + 1 / 4) / Real.sqrt (n + 1 + 1 / 4) ‚â§ (n + 1 / 2) / (n + 1) := by
  rw [‚Üê Real.sqrt_div, sqrt_le_left, div_pow, div_le_div_iff]
  ¬∑ ring_nf
    gcongr ?_ + _ + _ + _
    norm_num1
  all_goals positivity

/-- an explicit function of the central binomial coefficient which we will show is always less than
‚àöœÄ, to get a lower bound on the central binomial coefficient
-/
def centralBinomialLower (n : ‚Ñï) : ‚Ñù :=
  centralBinom n * Real.sqrt (n + 1 / 4) / (4 : ‚Ñù) ^ n

theorem centralBinomialLower_monotone : Monotone centralBinomialLower := by
  refine monotone_nat_of_le_succ ?_
  intro n
  rw [centralBinomialLower, centralBinomialLower, _root_.pow_succ', ‚Üêdiv_div]
  refine div_le_div_of_nonneg_right ?_ (by positivity)
  rw [le_div_iff‚ÇÄ, mul_assoc, mul_comm, ‚Üê div_le_div_iff, centralBinom_ratio, mul_comm,
    mul_div_assoc, Nat.cast_add_one]
  refine mul_le_mul_of_nonneg_left (lower_monotone_aux n) (by positivity)
  ¬∑ positivity
  ¬∑ rw [Nat.cast_pos]
    exact centralBinom_pos _
  ¬∑ positivity

/-- an explicit function of the central binomial coefficient which we will show is always more than
‚àöœÄ, to get an upper bound on the central binomial coefficient
-/
def centralBinomialUpper (n : ‚Ñï) : ‚Ñù :=
  centralBinom n * Real.sqrt (n + 1 / 3) / (4 : ‚Ñù) ^ n

theorem centralBinomialUpper_monotone : Antitone centralBinomialUpper :=
  by
  refine antitone_nat_of_succ_le ?_
  intro n
  rw [centralBinomialUpper, centralBinomialUpper, _root_.pow_succ', ‚Üê div_div]
    -- regression: I needed to qualify pow_succ
  refine div_le_div_of_nonneg_right ?_ (by positivity)
  rw [div_le_iff‚ÇÄ, mul_assoc, mul_comm _ (_ * _), ‚Üê div_le_div_iff, mul_comm, mul_div_assoc,
    centralBinom_ratio, Nat.cast_add_one]
  refine mul_le_mul_of_nonneg_left (upper_monotone_aux _) (by positivity)
  ¬∑ rw [Nat.cast_pos]
    exact centralBinom_pos _
  ¬∑ positivity
  ¬∑ positivity

theorem centralBinom_limit :
    Tendsto (fun n => (centralBinom n : ‚Ñù) * Real.sqrt n / (4 : ‚Ñù) ^ n) atTop (ùìù (sqrt œÄ)‚Åª¬π) := by
  have := Real.pi_pos
  have : (sqrt œÄ)‚Åª¬π = sqrt œÄ / sqrt œÄ ^ 2 := by
    rw [inv_eq_one_div, sq, ‚Üê div_div, div_self]
    positivity
  rw [this]
  have : Tendsto (fun n => Stirling.stirlingSeq (2 * n)) atTop (ùìù (sqrt œÄ)) := by
    refine Tendsto.comp Stirling.tendsto_stirlingSeq_sqrt_pi ?_
    exact tendsto_id.const_mul_atTop' two_pos
  refine (this.div (Stirling.tendsto_stirlingSeq_sqrt_pi.pow 2) (by positivity)).congr' ?_
  filter_upwards [eventually_gt_atTop (0 : ‚Ñï)] with n hn
  dsimp
  rw [Stirling.stirlingSeq, Stirling.stirlingSeq, centralBinom, two_mul n, cast_add_choose,
    ‚Üêtwo_mul]
  field_simp
  ring_nf
  rw [exp_mul, mul_comm n 2, pow_mul (2 : ‚Ñù)]
  norm_cast
  ring_nf -- this was a 7 line rw proof in Lean 3, this one is more principled but hmmm

theorem centralBinomialUpper_limit : Tendsto centralBinomialUpper atTop (ùìù (sqrt œÄ)‚Åª¬π) :=
  by
  have : (sqrt œÄ)‚Åª¬π = (sqrt œÄ)‚Åª¬π / Real.sqrt 1 := by rw [Real.sqrt_one, div_one]
  have h : Real.sqrt 1 ‚â† 0 := sqrt_ne_zero'.2 zero_lt_one
  rw [this]
  refine (centralBinom_limit.div (tendsto_natCast_div_add_atTop (1 / 3 : ‚Ñù)).sqrt h).congr' ?_
  filter_upwards [eventually_gt_atTop 0] with n hn
  dsimp
  rw [sqrt_div (Nat.cast_nonneg _), centralBinomialUpper, div_div, mul_div_assoc',
    div_div_eq_mul_div, mul_right_comm, mul_div_mul_right]
  ¬∑ positivity

theorem centralBinomialLower_limit : Tendsto centralBinomialLower atTop (ùìù (sqrt œÄ)‚Åª¬π) := by
  have : (sqrt œÄ)‚Åª¬π = (sqrt œÄ)‚Åª¬π / Real.sqrt 1 := by rw [Real.sqrt_one, div_one]
  have h : Real.sqrt 1 ‚â† 0 := sqrt_ne_zero'.2 zero_lt_one
  rw [this]
  refine (centralBinom_limit.div (tendsto_natCast_div_add_atTop (1 / 4 : ‚Ñù)).sqrt h).congr' ?_
  filter_upwards [eventually_gt_atTop 0] with n hn
  dsimp
  rw [sqrt_div (Nat.cast_nonneg _), centralBinomialLower, div_div, mul_div_assoc',
    div_div_eq_mul_div, mul_right_comm, mul_div_mul_right]
  ¬∑ positivity

theorem centralBinomialUpper_bound (n : ‚Ñï) :
    (n.centralBinom : ‚Ñù) ‚â§ (4 : ‚Ñù) ^ n / sqrt (œÄ * (n + 1 / 4)) := by
  have := pi_pos
  have := centralBinomialLower_monotone.ge_of_tendsto centralBinomialLower_limit n
  rwa [sqrt_mul, ‚Üê div_div, le_div_iff‚ÇÄ, div_eq_mul_one_div ((4 : ‚Ñù) ^ n : ‚Ñù), ‚Üê div_le_iff‚ÇÄ',
    one_div (sqrt œÄ)]
  all_goals positivity

theorem centralBinomialLower_bound (n : ‚Ñï) :
    (4 : ‚Ñù) ^ n / sqrt (œÄ * (n + 1 / 3)) ‚â§ n.centralBinom := by
  have := pi_pos
  have := centralBinomialUpper_monotone.le_of_tendsto centralBinomialUpper_limit n
  rwa [sqrt_mul, ‚Üê div_div, div_le_iff‚ÇÄ, div_eq_mul_one_div, ‚Üê le_div_iff‚ÇÄ', one_div (sqrt œÄ)]
  all_goals positivity

theorem cexp_eq_tsum {x : ‚ÑÇ} : Complex.exp x = ‚àë' i, x ^ i / i ! := by
  rw [Complex.exp_eq_exp_‚ÑÇ, NormedSpace.exp_eq_tsum_div]

theorem rexp_eq_tsum {x : ‚Ñù} : Real.exp x = ‚àë' i, x ^ i / i ! := by
  rw [exp_eq_exp_‚Ñù, NormedSpace.exp_eq_tsum_div]

lemma exp_factorial_bound {x : ‚Ñù} (hx : 0 ‚â§ x) {n : ‚Ñï} : (x : ‚Ñù) ^ n / n ! ‚â§ exp x := by
  rw [exp_eq_exp_‚Ñù]
  exact le_hasSum (NormedSpace.expSeries_div_hasSum_exp ‚Ñù x) n (fun _ _ => by positivity)

theorem exp_factorial_bound_of_ne_zero {n : ‚Ñï} {x : ‚Ñù} (hx : 0 ‚â§ x) (hn : n ‚â† 0) :
    (x : ‚Ñù) ^ n / n ! < exp x := by
  rw [exp_eq_exp_‚Ñù]
  refine (sum_le_hasSum {n, 0} ?_ (NormedSpace.expSeries_div_hasSum_exp ‚Ñù x)).trans_lt' ?_
  ¬∑ intro x _
    positivity
  rw [sum_pair hn]
  simp

theorem factorial_bound_exp {n : ‚Ñï} : ((n : ‚Ñù) / Real.exp 1) ^ n ‚â§ n ! := by
  rw [div_pow, ‚Üê rpow_natCast (exp 1), exp_one_rpow, div_le_iff‚ÇÄ, ‚Üê div_le_iff‚ÇÄ']
  ¬∑ exact exp_factorial_bound (Nat.cast_nonneg _)
  ¬∑ positivity
  ¬∑ positivity

theorem factorial_bound_exp_of_ne_zero {n : ‚Ñï} (hn : n ‚â† 0) : ((n : ‚Ñù) / Real.exp 1) ^ n < n ! := by
  rw [div_pow, ‚Üê rpow_natCast (exp 1), exp_one_rpow, div_lt_iff, ‚Üê div_lt_iff']
  ¬∑ exact exp_factorial_bound_of_ne_zero (Nat.cast_nonneg _) hn
  ¬∑ positivity
  ¬∑ positivity

theorem choose_upper_bound {n t : ‚Ñï} : (n.choose t : ‚Ñù) ‚â§ (exp 1 * n / t) ^ t := by
  cases' Nat.eq_zero_or_pos t with h h
  ¬∑ simp [h]
  refine (Nat.choose_le_pow t n).trans ?_
  refine (div_le_div_of_nonneg_left ?_ ?_ factorial_bound_exp).trans ?_
  ¬∑ positivity
  ¬∑ positivity
  rw [‚Üê div_pow, div_div_eq_mul_div, mul_comm]

theorem choose_upper_bound_of_pos {n t : ‚Ñï} (hn : n ‚â† 0) (ht : t ‚â† 0) :
    (n.choose t : ‚Ñù) < (exp 1 * n / t) ^ t := by
  refine (Nat.choose_le_pow t n).trans_lt ?_
  refine (div_lt_div_of_pos_left ?_ ?_ (factorial_bound_exp_of_ne_zero ht)).trans_eq ?_
  ¬∑ positivity
  ¬∑ positivity
  rw [‚Üê div_pow, div_div_eq_mul_div, mul_comm]

-- check if the coercion on the rhs goes away after #8366
theorem choose_upper_bound' {n t : ‚Ñï} : (n.choose t : ‚Ñù) ‚â§ exp t * (n / t : ‚Ñù) ^ t :=
  choose_upper_bound.trans_eq <| by rw [mul_div_assoc, mul_pow, ‚Üê exp_one_rpow t, rpow_natCast]
